---
import type { CollectionEntry } from "astro:content";

import BlogHero from "@/components/blog/Hero.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";

import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { description, ogImage, publishDate, title, updatedDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await post.render();
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<div class="gap-x-8 lg:flex lg:items-start">
		{!!headings.length && <TOC headings={headings} />}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
			>
				<slot />
				<hr />
				<p>
					Found this insightful? If you're interested in my AI <a href="/consulting">consulting</a>,
					please reach out to me via
					<a href="mailto:raf.wilinski@gmail.com">email</a> or on <a
						href="https://x.com/RafalWilinski">X</a
					>
				</p>
				<WebMentions />
				<div class="mt-8 border-t border-gray-200 pt-8 dark:border-gray-700">
					<form
						action="https://buttondown.com/api/emails/embed-subscribe/wilinski"
						method="post"
						class="embeddable-buttondown-form flex max-w-md flex-col gap-4"
					>
						<label for="email" class="text-md font-semibold"
							>Liked it? Subscribe to my newsletter</label
						>
						<div class="flex gap-2">
							<input
								type="email"
								name="email"
								id="email"
								placeholder="you@example.com"
								class="flex-1 rounded-md border border-gray-300 px-4 py-2 dark:border-gray-700 dark:bg-gray-800"
							/>
							<input
								type="submit"
								value="Subscribe"
								class="cursor-pointer rounded-md bg-accent px-4 py-2 font-semibold text-white hover:bg-accent/90"
							/>
						</div>
						<input type="hidden" value="1" name="embed" />
					</form>
				</div>
			</div>
		</article>
	</div>
	<button
		aria-label="Back to Top"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		data-show="false"
		id="to-top-btn"
		><svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
